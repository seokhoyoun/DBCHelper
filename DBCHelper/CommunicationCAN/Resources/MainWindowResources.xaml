<!-- 
This resource dictionary is used by the MainWindow. 
-->
<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:vm="clr-namespace:CommunicationCAN.ViewModel"
  xmlns:vw="clr-namespace:CommunicationCAN.View"
  xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
  >

    <DataTemplate DataType="{x:Type vm:AllCustomersViewModel}">
        <vw:AllCustomersView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:CustomerViewModel}">
        <vw:CustomerView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:SignalListViewModel}">
        <vw:SignalListView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:MessageListViewModel}">
        <vw:MessageListView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NodeListViewModel}">
        <vw:NodeListView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:CANCommunicationViewModel}">
        <vw:CANCommunicationView/>
    </DataTemplate>

    <!-- 
  This style configures both of the main content areas in the main window.
  -->
    <Style x:Key="MainHCCStyle" TargetType="{x:Type ContentControl}">

        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <DockPanel>

                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="#FFF" />
        <Setter Property="AlternationCount" Value="2" />
    </Style>

    <Style x:Key="" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="#CCC"></Setter>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="#EEE"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="5,1">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Expander x:Name="ExpanderMenu" IsExpanded="False" Width="220"  HorizontalAlignment="Left" Background="{x:Null}" >
                        <Expander.Header>
                            <TextBlock  VerticalAlignment="Center">
                                    <Hyperlink  Command="{Binding Path=Command}" TextDecorations="">       
                                          <TextBlock FontSize="13" Text="{Binding Path=DisplayName}" FontWeight="SemiBold" Foreground="Black" />
                                          <materialDesign:PackIcon Kind="{Binding Icon}" Width="15" Height="12" Foreground="HotPink" />
                                     </Hyperlink>
                                </TextBlock>
                        </Expander.Header>
                        <ListView x:Name="ListViewMenu" ItemsSource="{Binding Path=SubItems}"
                                      Background="{x:Null}"
                                      BorderBrush="{x:Null}"
                                      Foreground="Black" VirtualizingStackPanel.IsVirtualizing="True"
                                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                                      VirtualizingStackPanel.VirtualizationMode="Recycling" >
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="10 1">
                                                <Hyperlink Command="{Binding Path=Command}" TextDecorations="">
                                                    <materialDesign:PackIcon Kind="{Binding Icon}" Width="13" Height="11" Foreground="Red"/>
                                                    <TextBlock FontSize="11" Text="{Binding Path=DisplayName}" />
                                                </Hyperlink>
                                            </TextBlock>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </Expander>

                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120" >
            <Button 
        Command="{Binding Path=CloseCommand}"
        BorderThickness="0"
        Background="Transparent"
        Cursor="Hand"
        DockPanel.Dock="Right"
        Focusable="False"
        FontFamily="Courier" 
        FontSize="9"
        FontWeight="Bold"  
        Margin="0,1,0,0"
        Padding="0"
        VerticalContentAlignment="Bottom"
        Width="16" Height="16" 
        >
                <materialDesign:PackIcon Kind="ExitToApp" Width="13" Height="12" Foreground="Red"/>

            </Button>
            <ContentPresenter 
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center" 
             />
        </DockPanel>
    </DataTemplate>

    <Style x:Key="TabItemStyle" TargetType="TabItem">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Style="{StaticResource MainBorderStyle}">

                        <DockPanel Background="White">
                            <Button 
                                Command="{Binding Path=CloseCommand}"
                                BorderThickness="0"
                                Background="Transparent"
                                Cursor="Hand"
                                DockPanel.Dock="Right"
                                Focusable="False"
                                FontFamily="Courier" 
                                FontSize="9"
                                FontWeight="Bold"  
                                Margin="0,1,0,0"
                                Padding="0"
                                VerticalContentAlignment="Bottom"
                                Width="16" Height="16" 
                                >
                                <materialDesign:PackIcon Kind="ExitToApp" Width="13" Height="12" Foreground="Red"/>

                            </Button>
                            <TextBlock 
                            FontSize="11"
                            FontWeight="Heavy"
                            Padding="5"
                            Text="{Binding Path=DisplayName}" 
                            VerticalAlignment="Center" 
                        />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FooterTabItemStyle" TargetType="TabItem">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
            x:Name="WorkspaceTabControl"
            IsSynchronizedWithCurrentItem="True"
            ItemsSource="{Binding}" 
            ItemContainerStyle="{StaticResource TabItemStyle}"
            Margin="2"
         />
    </DataTemplate>

    <DataTemplate x:Key="SemiWorkspacesTemplate" >
        <TabControl 
            IsSynchronizedWithCurrentItem="True"
            ItemsSource="{Binding}" 
            ItemContainerStyle="{StaticResource TabItemStyle}"
            Margin="2"
         />
    </DataTemplate>

    <Style x:Key="SideMenuButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.7"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DefaultButtonStyle" TargetType="Button">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}"  Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="blinking">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" AutoReverse="true"
                                         To="0.2" Duration="0:0:0.7">
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="blinking" />

                </DataTrigger.ExitActions>
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Tag}" Value="False">
                <Setter Property="Opacity" Value="1"/>

            </DataTrigger>-->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsEnabled}" Value="False">
                <Setter Property="Foreground" Value="Gray"/>

            </DataTrigger>
        </Style.Triggers>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Margin" Value="2 8"/>
        <Setter Property="Height" Value="34"/>
        <!--<Setter Property="HorizontalContentAlignment" Value="Center"/>-->
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <BulletDecorator Cursor="Hand">
                        <!--Text element-->
                        <Border CornerRadius="3" BorderBrush="#FFE2E2E2" BorderThickness="1">
                            <Grid>

                                <!--We don't need any bullet, cause our border is the switching element-->
                                <!--<Border  Background="#FFCDCDCD" CornerRadius="1" Name="RadioMark" />-->
                                <ContentPresenter VerticalAlignment="Center" />
                            </Grid>

                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="White" Offset="0" />
                                    <GradientStop Color="#FFE2E2E2" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                    </BulletDecorator>

                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" Value="LightGray"/>
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="FooterWorkspacesTemplate">
        <ItemsControl ItemsSource="{Binding}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.ItemTemplate>
                <DataTemplate>
                        <Button Style="{StaticResource DefaultButtonStyle}" Command="{Binding Command}" Height="45">
                            <StackPanel Orientation="Horizontal" >
                                <materialDesign:PackIcon Kind="{Binding Icon}" Height="23" Width="23" Margin="5 8"/>
                                <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" Margin="12 8"/>
                            </StackPanel>
                        </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

</ResourceDictionary>